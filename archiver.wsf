<job id="rename_tool">
<script language="JavaScript">
var CONF = {
	//ファイル名として不正な記号（\/:*?"<>|）が指定された場合に置き換える文字
	REPLACE_NG_CHAR: '-',
	//保管するファイル／フォルダの名前フォーマット
	//[$date]には、YYYYMMDDにて日付が入る
	//[$time]には、hhmissにて時刻が入る
	//[$name]には、元のファイル名が入る
	NAME_FORMAT:'[$date]_[$name]',
	// メッセージ：日本語
	MSG:{
		C1:'「[$folder_name]」は、既に存在してます。\nフォルダ名を変更してください。',
		C2:'「[$file_name]」は、既に存在してます。\nファイル名を変更してください。'
	}
};

var objParm;
var aFile;
var aFolder;
var parentPath;
var strDataName;
var fso = new ActiveXObject('Scripting.FileSystemObject');
var objWSShell = new ActiveXObject('WScript.Shell');
var i;


//パラメーターが指定されているときの処理（ドラッグ＆ドロップ時）
objParm = WScript.arguments;
if(objParm.length > 0){
	for(i = 0; i < objParm.length; i++){

		// --DEBUG: US版OSにてファイル取り込みエラー WScript.Echo(objParm(i));
		parentPath = fso.GetParentFolderName(objParm(i)) + '\\';

		// パラメーターにフォルダが渡された
		if(fso.FolderExists(objParm(i))){
			aFolder = fso.GetFolder(objParm(i));
			strDataName = setNamePrefix(aFolder.Name);

			// フォルダの存在チェック
			if(fso.FolderExists(parentPath + strDataName)){
				// 既に存在している
				WScript.Echo(CONF.MSG.C1.replace('[$folder_name]', strDataName));
			}
			else{
				// フォルダ名をPrefix付きに変更
				aFolder.Name = strDataName;
			}
		}

		// パラメーターにファイルが渡された
		else if(fso.FileExists(objParm(i))){
			aFile = fso.GetFile(objParm(i));
			strDataName = setNamePrefix(aFile.Name);

			// ファイルの存在チェック
			if(fso.FileExists(parentPath + strDataName)){
				// 既に存在している
				WScript.Echo(CONF.MSG.C2.replace('[$file_name]', strDataName));
			}
			else{
				// ファイル名をPrefix付きに変更
				aFile.Name = strDataName;
			}
		}
	}
}

fso = null;
objWSShell = null;

// --------------------------------------------------
// 名前にPrefixを追加する
function setNamePrefix(strName){
	var strDate = getFormatedDate(new Date()); //日付を取得yyyymmdd
	var strTime = getFormatedTime(new Date()); //時刻を取得 hhmiss
	var strRsltName;

	//ファイル名を取得
	strRsltName = CONF.NAME_FORMAT;
	strRsltName = strRsltName.replace('[$date]', strDate);
	strRsltName = strRsltName.replace('[$time]', strTime);
	strRsltName = strRsltName.replace('[$name]', strName);

	//ファイルに不適切な記号の処理
	strRsltName = setProperFileName(strRsltName, CONF.REPLACE_NG_CHAR);

	return strRsltName;
}

// --------------------------------------------------
// 日付フォーマット作成用関数 yyyymmdd
function getFormatedDate(dtDate){
	var strDate; //日付文字列

	strDate = '';
	strDate += dtDate.getYear(); //年 yyyy
	strDate += formatString(dtDate.getMonth()+1, 2); //月 mm
	strDate += formatString(dtDate.getDate(), 2); //日 dd

	//yyyymmddのフォーマットで日付を返す
	return strDate;
}

// --------------------------------------------------
// 日付フォーマット作成用関数 hhmiss
function getFormatedTime(dtDate){
	var strTime; //時刻文字列
	strTime = '';
	strTime += formatString(dtDate.getHours(), 2); //時 hh
	strTime += '';
	strTime += formatString(dtDate.getMinutes(), 2); //分 mi
	strTime += '';
	strTime += formatString(dtDate.getSeconds(), 2); //秒 ss

	//hhmissのフォーマットで時刻を返す
	return strTime;
}

// --------------------------------------------------
// 例）
// 2→02にする。
// numStrLen 返す文字列の長さを指定
function formatString(strNum, numStrLen){
	var strBuf;
	var i;

	strBuf = '' + strNum;
	//元の文字よりも返す文字列の指定のほうが短い場合は何もしない
	if(strBuf.length < numStrLen){
		// 数値の前に0を付与
		for(i=strBuf.length; i < numStrLen; i++){
			strBuf = '0' + strBuf;
		}
	}
	return strBuf;
}

// --------------------------------------------------
// ファイル名として不適切な文字を置き換える
function setProperFileName(strName, chrReplace){
	return strName.replace(/[\/:*?"<>|]/g, chrReplace);
}

</script>
</job>
